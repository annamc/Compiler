Still must do:
	boolean expressions with equality
	if
	while
	testcases

	code comments

Still might do:
	create and backpatch heap table to make compiled code as small as possible
	minus
	show assembly











int expressions - (1+2-3+a)
boolean expressions - (a==true)
boolean expressions with int expressions - ((1+a)==2)

1 temp byte addresses - temp1 = store intermediate results of int expr, 

when (operand)
  generateIntExpr(node that is operand)
when (comparison)
  generateBoolExpr


generateIntExpr (node) {
   switch(node.child[1].kind)
   addAddress = temp1 address (assume we're coming back through from recursion)
     case(operand)
       call generateIntExpr(node.child[1])
     case(digit)
       generate load accumulator = children[1]
       generate store accumulator = temp1
       addAddress = temp1 address -- this is already set. Sanity check.  
     case(id)
       addAddress = address where id is stored (the only case where we add something other than temp1



   if (node.value == minus)
     // do something to make addAddress appear negative


   
   generate load accumulator = children[0] -- will always be a digit
   generate add with carry = accumulator (children[0]) + addAddress (children[1])
   store results from accumulator in temp1
}

generateBoolExpr (node) {

	generate load x reg = temp1
	generate compare byte = temp2

}


	generate compare (temp1 in x reg vs temp2 in memory)
	generate branch not equal = xyz
	if print,
		generate print(false)
	if assign,
		generate assign(false)
	generate compare 1 to 2
	generate branch not equal = abc
	xyz:
		if print, generate print(true)
		if assign, generate assign(true)
	abc:

	











-1 is the same as +255
-10 is the same as +246



11 + 246 = 257 = 1
10 + 251 = 261 = 5

-1  | 255
-10 | 246
-5  | 251



	
